<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on rx-78-kum0</title>
    <link>https://rx-78-kum0.github.io/post/</link>
    <description>Recent content in Posts on rx-78-kum0</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jun 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://rx-78-kum0.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang gc优化</title>
      <link>https://rx-78-kum0.github.io/post/golang/gc%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/golang/gc%E4%BC%98%E5%8C%96/</guid>
      <description>小对象要合并 函数频繁创建的简单的对象，直接返回对象，效果比返回指针效果要好 类型转换要注意，官方用法消耗特别大。 package string_util import ( &amp;#34;unsafe&amp;#34; ) func str2bytes(s string) []byte { x := (*[2]uintptr)(unsafe.Pointer(&amp;amp;s)) h := [3]uintptr{x[0], x[1], x[1]} return *(*[]byte)(unsafe.Pointer(&amp;amp;h)) } func bytes2str(b []byte) string { return *(*string)(unsafe.Pointer(&amp;amp;b)) } 避免反复创建slice，map func(r*Reader)Read()([]byte,error) // 此函数没有形参，每次调用的时候返回一个[]byte。 func(r*Reader)Read(buf[]byte)(int,error) // 此函数个函数在每次迪调用的时候，会重用形参声明。  避免使用&amp;quot;+&amp;quot;拼接字符串 package string_utils import ( &amp;#34;strings&amp;#34; ) func strAppend(s string, ss ...string) string { var r strings.Builder r.WriteString(s) for _, v := range ss { r.WriteString(v) } return r.String() } </description>
    </item>
    
    <item>
      <title>golang time工具函数</title>
      <link>https://rx-78-kum0.github.io/post/golang/time/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/golang/time/</guid>
      <description>package util-time import ( &amp;#34;strconv&amp;#34; &amp;#34;time&amp;#34; ) // 获取当前的时间 - 字符串 func GetCurrentDate() string { return time.Now().Format(&amp;#34;2006/01/02 15:04:05&amp;#34;) } // 获取当前的时间 - Unix时间戳 func GetCurrentUnix() int64 { return time.Now().Unix() } // 获取当前的时间 - 毫秒级时间戳 func GetCurrentMilliUnix() int64 { return time.Now().UnixNano() / 1000000 } // 获取当前的时间 - 纳秒级时间戳 func GetCurrentNanoUnix() int64 { return time.Now().UnixNano() } func GetCurrentTime() string { var cstSh, _ = time.LoadLocation(&amp;#34;Asia/Shanghai&amp;#34;) t := time.Now().In(cstSh).Format(&amp;#34;2006/01/02/ 15:04:05&amp;#34;) return t } func GetCurrentHour() int { var cstSh, _ = time.</description>
    </item>
    
    <item>
      <title>GDT&amp;LDT</title>
      <link>https://rx-78-kum0.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/gdtldt/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/gdtldt/</guid>
      <description>GDT(Global Descriptor Table)全局描述符表Ⅰ GDT是一个以 段描述符 为表项的数组类型的数据结构，在内存中线性存放。每个段描述符占 8 个字节。
GDTR寄存器存放GDT表的基地址和表长界限(高32位存放GDT基址，低16为存放GDT限长)。指令LGDT和SGDT分别用于加载和保存GDTR寄存器的内容。在机器刚加电或处理器复位后，基地址被默认地设置为0，而长度值被设置成0xFFFF。在保护模式初始化过程中必须给GDTR加载一个新值。
段选择子(Segement Selector) 由GDTR访问全局描述符表是通过“段选择子”(实模式下的段寄存器)来完成的。段选择子是一个16位的寄存器(同实模式下的段寄存器相同)。
段选择子共16bit，由三部分组成: 描述符索引(index)、TI、请求特权级(RPL)  描述符索引(index): 在描述符表中定位一个段描述符。 TI: 描述符表指示器， TI＝0 时，表示描述符在 GDT 中； TI＝1 时，描述符在 LDT 中。 RPL: 请求特权级，表示给出当前选择子访问的内存段的特权级别。每一个段都有一个特定的级别。每当一个程序试图访问某一个段时，就将该程序所拥有的特权级与要访问的特权级进行比较，以决定能否访问该段。系统约定，CPU只能访问同一特权级或级别较低特权级的段。  因为每个描述符占 8 字节，因此描述符在表内的偏移地址是索引号乘以 8 处理器在执行任何改变段选择器的指令时(比如 pop、 mov、jmp far、 call far、 iret、 retf)，就将指令中提供的索引号乘以 8 作为偏移地址，同 GDTR 中提供的线性基地址相加，以访问 GDT。在表内找到的描述符，并加载到不可见的描述符高速缓存部分。此后每当有访问内存的指令时，就不再访问 GDT 中的描述符，直接用当前段寄存器描述符高速缓存器提供线性基地址。
段描述符(Segment Descriptor) 每个段描述符占 8 个字节。由三部分组成: 线性基地址、段界限和段的访问属性。
    G: 粒度位，用于解释段界限的含义。当 G 位是&amp;quot;0&amp;quot;时，段界限以字节为单位。此时，段的扩展范围是从 1 字节到 1 兆字节（ 1B～1MB），因为描述符中的界限值是 20 位的。相反，如果该位是&amp;quot;1&amp;rdquo;，那么，段界限是以 4KB 为单位的。这样，段的扩展范围是从 4KB到 4GB。</description>
    </item>
    
    <item>
      <title>获取用户home目录路径</title>
      <link>https://rx-78-kum0.github.io/post/golang/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7home%E7%9B%AE%E5%BD%95%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/golang/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7home%E7%9B%AE%E5%BD%95%E8%B7%AF%E5%BE%84/</guid>
      <description>func Home() (string, error) { user, err := user.Current() if nil == err { return user.HomeDir, nil } // cross compile support  if runtime.GOOS == &amp;#34;windows&amp;#34; { return homeWindows() } // Unix-like system, so just assume Unix  return homeUnix() } func homeUnix() (string, error) { // First prefer the HOME environmental variable  if home := os.Getenv(&amp;#34;HOME&amp;#34;); home != &amp;#34;&amp;#34; { return home, nil } // If that fails, try the shell  var stdout bytes.</description>
    </item>
    
    <item>
      <title>变量和标签</title>
      <link>https://rx-78-kum0.github.io/post/%E6%B1%87%E7%BC%96/%E5%8F%98%E9%87%8F%E5%92%8C%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/%E6%B1%87%E7%BC%96/%E5%8F%98%E9%87%8F%E5%92%8C%E6%A0%87%E7%AD%BE/</guid>
      <description>标签(Label) 指向一大块的首地址。使用方法: LABEL_NAME: XXX XXX
局部Label 以(点)开头，比如.begin，.1，.2。在不同的段中可以使用相同的带点开头的LABEL，不能重复。最好只用在代码段中。
变量 函数变量 指的是一个SUB_RUTIN的首地址。比如DispStr，使用的时候是call DispStr，然后在声明时候因为它本来就是一个地址，就是用上面标签的同样的声明方式。 DispStr:（注意后面有冒号）
普通变量 使用equ生成的纯的变量(宏) 比如：TopOfStack equ $ - LABEL_STACK - 1
使用db dd dw生成的变量(地址) 生成的各种变量分别指向的是不同的数据类型(冒号可加可不加) 比如： _dwDispPos: dd (80 * 6 + 0) * 2</description>
    </item>
    
    <item>
      <title>irony-server-install</title>
      <link>https://rx-78-kum0.github.io/post/emacs/irony-server-install/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/emacs/irony-server-install/</guid>
      <description>Mac   首先需安装cmake和llvm
brew install cmake llvm   emacs里执行M-x irony-install-server得到安装执行命令
cmake -DCMAKE_INSTALL_PREFIX\=/Users/kumotyou/.emacs.d/irony/ \ /Users/kumotyou/.emacs.d/elpa/irony-20200130.849/server \ &amp;amp;&amp;amp; cmake --build . --use-stderr --config Release --target install   添加环境变量
-DCMAKE_PREFIX_PATH=/usr/local/opt/llvm -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON -DLIBCLANG_INCLUDE_DIR=/usr/local/opt/llvm/include -DLIBCLANG_LIBRARY=/usr/local/opt/llvm/lib/libclang.dylib   最终编译命令
cmake -DCMAKE_INSTALL_PREFIX\=/Users/kumotyou/.emacs.d/irony/ \ -DCMAKE_PREFIX_PATH=/usr/local/opt/llvm \ -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON \ -DLIBCLANG_INCLUDE_DIR=/usr/local/opt/llvm/include \ -DLIBCLANG_LIBRARY=/usr/local/opt/llvm/lib/libclang.dylib \ /Users/kumotyou/.emacs.d/elpa/irony-20200130.849/server \ &amp;amp;&amp;amp; cmake --build . --use-stderr --config Release --target install   Ubuntu   拉取ccls源码, 并进入ccls根目录
git clone https://github.com/MaskRay/ccls cd ccls   拉取第三方依赖.</description>
    </item>
    
    <item>
      <title>bochsrc</title>
      <link>https://rx-78-kum0.github.io/post/configuration/bochsrc/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/configuration/bochsrc/</guid>
      <description>############################################################### # Configuration file for Bochs ############################################################### # how much memory the emulated machine will have megs: 32 # filename of ROM images romimage: file=/usr/local/share/bochs/BIOS-bochs-latest vgaromimage: file=/usr/local/share/bochs/VGABIOS-lgpl-latest # what disk images will be used floppya: 1_44=a.img, status=inserted # choose the boot disk. boot: floppy # where do we send log messages? # log: bochsout.txt # disable the mouse mouse: enabled=0 # enable key mapping, using US layout as default. # keyboard_mapping: enabled=1, map=/usr/local/share/bochs/keymaps/x11-pc-us.</description>
    </item>
    
    <item>
      <title>mac编译nasm问题汇总</title>
      <link>https://rx-78-kum0.github.io/post/%E6%B1%87%E7%BC%96/mac%E7%BC%96%E8%AF%91nasm%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/%E6%B1%87%E7%BC%96/mac%E7%BC%96%E8%AF%91nasm%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      <description>ld: dynamic main executables must link with libSystem.dylib for architecture x86_64 # -lSystem ld a.o -o a -lSystem </description>
    </item>
    
    <item>
      <title>汇编语言种类</title>
      <link>https://rx-78-kum0.github.io/post/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A7%8D%E7%B1%BB/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A7%8D%E7%B1%BB/</guid>
      <description>汇编语言种类 汇编语言和CPU息息相关，但是不能把汇编语言完全等同于CPU的机器指令。不同架构的CPU指令并不相同，如x86，powerpc，arm各有各的指令系统；甚至同一种架构的CPU有几套指令集，典型的如arm除了有32位的指令集外，还有一套16位的thumb指令集。但是作为开发语言的汇编，本质上是一套语法规则和助记符的集合，它可以包容不同的指令集。如果从CPU体系来划分，常见的汇编有两种：IBM PC汇编和ARM汇编。 IBM PC汇编也就是Intel的汇编，因为IBM 最早推出PC机，后来的体系很多都要和它兼容，所以也使用了相同的汇编语言。ARM压根没考虑过兼容，它的指令集和x86完全是两个体系，所以汇编语言也独立发展出一套。 CPU只是限定了机器码，作为开发语言的汇编，其实还和编译器息息相关。汇编语言出现的早，没有像C语言一样定义出标准，所以编译器的厂商各搞一套。到现在，最有名的也是两家：MASM和GNU ASM。前者是微软的，只支持x86，用在DOS/Windows平台中；后者是开源产品，主要用在Linux中，基本上支持大部分的CPU架构。这两者的区别在于伪指令的不同，伪指令是用来告诉编译器如何工作的，和编译器相关，和CPU无关。其实汇编的编译相当简单，这两套伪指令只是符号不相同，含义是大同小异，明白了一种，看另一种就很容易了。
从汇编格式分，还有Intel格式和AT&amp;amp;T格式的区别，前者是Intel的，windows平台常见，后者最早由贝尔实验室推出，用于Unix中，GUN汇编器的缺省格式就是AT&amp;amp;T。不过GNU的汇编器和调试器gdb对这两种格式都支持，可以随便切换。MASM只支持Intel格式。Intel格式和AT&amp;amp;T格式的区别只是符号系统的区别，这与x86和arm的区别可不一样，后者是CPU体系的区别。最后谈谈内嵌汇编，它是用于C语言和汇编语言混合编程的，所以和编译器也关系紧密，目前也是有两种，GNU的内嵌汇编和MASM的内嵌汇编，它们的语法和普通汇编是有区别的，特别是GNU的内嵌汇编不是很容易看懂，需要专门学习才行。MASM的内嵌汇编和普通汇编的区别则不大。
CPU体系分类  IBM PC汇编 ARM汇编  汇编格式分类  Intel格式 (MASM只支持Intel格式) AT&amp;amp;T格式  内嵌汇编  GNU的内嵌汇编 MASM的内嵌汇编 (MASM的内嵌汇编和普通汇编的区别则不大)  </description>
    </item>
    
    <item>
      <title>docker部署mysql问题汇总</title>
      <link>https://rx-78-kum0.github.io/post/mysql/docker%E9%83%A8%E7%BD%B2mysql%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/mysql/docker%E9%83%A8%E7%BD%B2mysql%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      <description>docker-compose 配置 version: &amp;#39;3&amp;#39; services: # mysql blog_mysql: image: mysql restart: always ports: - &amp;#39;3306:3306&amp;#39; environment: - MYSQL_ROOT_PASSWORD=xxxx volumes: - &amp;#39;/data/mysql:/var/lib/mysql&amp;#39; docker 安装完mysql 后客户端无法访问 进入镜像中的mysql docker exec -it container_id /bin/bash 登录mysql mysql -u root -p 修改root账号, 可以通过任何客户端连接 ALTER USER &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED WITH mysql_native_password BY &amp;#39;xxxxx&amp;#39;; </description>
    </item>
    
    <item>
      <title>flex宽度失效</title>
      <link>https://rx-78-kum0.github.io/post/css/flex%E5%AE%BD%E5%BA%A6%E5%A4%B1%E6%95%88/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/css/flex%E5%AE%BD%E5%BA%A6%E5%A4%B1%E6%95%88/</guid>
      <description>.flex { flex-shrink: 0; } </description>
    </item>
    
    <item>
      <title>canvas-drawImage</title>
      <link>https://rx-78-kum0.github.io/post/web/canvas-drawimage/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/web/canvas-drawimage/</guid>
      <description>context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);  img 规定要使用的图像, 画布或视频. sx 可选. 开始剪切的 x 坐标位置. sy 可选. 开始剪切的 y 坐标位置. swidth 可选. 被剪切图像的宽度. sheight 可选. 被剪切图像的高度. x 在画布上放置图像的 x 坐标位置. y 在画布上放置图像的 y 坐标位置. width 可选. 要使用的图像的宽度.(伸展或缩小图像) height 可选. 要使用的图像的高度.(伸展或缩小图像)  </description>
    </item>
    
    <item>
      <title>nyan</title>
      <link>https://rx-78-kum0.github.io/post/shell/nyan/</link>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/shell/nyan/</guid>
      <description>#!/usr/bin/env bash  # Print nyan cat # https://github.com/steckel/Git-Nyan-Graph/blob/master/nyan.sh # If you want big animated version: `telnet miku.acm.uiuc.edu` e=&amp;#39;\033&amp;#39; RESET=&amp;#34;$e[0m&amp;#34; BOLD=&amp;#34;$e[1m&amp;#34; CYAN=&amp;#34;$e[0;96m&amp;#34; RED=&amp;#34;$e[0;91m&amp;#34; YELLOW=&amp;#34;$e[0;93m&amp;#34; GREEN=&amp;#34;$e[0;92m&amp;#34; echo if [ $[$RANDOM%2] -eq &amp;#34;0&amp;#34; ]; then echo -en $RED&amp;#39;`·.,¸,.·*·.&amp;#39; echo -e $RESET$BOLD&amp;#39;╭━━━━╮&amp;#39;$RESET echo -en $YELLOW&amp;#39;`·.,¸,.·*·.&amp;#39; echo -e $RESET$BOLD&amp;#39;|::: /\_/\\&amp;#39;$RESET echo -en $GREEN&amp;#39;`·.,¸,.·*·.&amp;#39; echo -e $RESET$BOLD&amp;#39;|:::( ◕ᴥ◕)&amp;#39;$RESET echo -en $CYAN&amp;#39;`·.,¸,.·*·.&amp;#39; echo -e $RESET$BOLD&amp;#39;u-u━━-u--u&amp;#39;$RESET else echo -en $RED&amp;#39;-_-_-_-_-_-_-_&amp;#39; echo -e $RESET$BOLD&amp;#39;,------,&amp;#39;$RESET echo -en $YELLOW&amp;#39;_-_-_-_-_-_-_-&amp;#39; echo -e $RESET$BOLD&amp;#39;| /\_/\\&amp;#39;$RESET echo -en $GREEN&amp;#39;-_-_-_-_-_-_-&amp;#39; echo -e $RESET$BOLD&amp;#39;~|__( ^ .</description>
    </item>
    
    <item>
      <title>浏览器显示emoji</title>
      <link>https://rx-78-kum0.github.io/post/web/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%BE%E7%A4%BAemoji/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/web/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%BE%E7%A4%BAemoji/</guid>
      <description>// js 表情emoji转码 // 发送请求时将uft16转为utf-8 function utf16toEntities(str) { var patt = /[\ud800-\udbff][\udc00-\udfff]/g; // 检测utf16字符正则  return str.replace(patt, function(char) { var H, L, code; if (char.length === 2) { H = char.charCodeAt(0); // 取出高位  L = char.charCodeAt(1); // 取出低位  code = (H - 0xd800) * 0x400 + 0x10000 + L - 0xdc00; // 转换算法  return &amp;#39;&amp;amp;#&amp;#39; + code + &amp;#39;;&amp;#39;; } else { return char; } }); } // 收到后端的数据时展示emoji function entitiesToUtf16(str) { return str.</description>
    </item>
    
    <item>
      <title>interface类型</title>
      <link>https://rx-78-kum0.github.io/post/golang/interface%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/golang/interface%E7%B1%BB%E5%9E%8B/</guid>
      <description>Go 语言与鸭子类型的关系  If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.
如果某个东西长得像鸭子, 像鸭子一样游泳, 像鸭子一样嘎嘎叫, 那它就可以被看成是一只鸭子.
在 Go 语言中, 如果类型的方法集完全包含接口的方法集，则可认为该类型实现了该接口.
 鸭子类型是一种动态语言的风格, 在这种风格中, 一个对象有效的语义, 不是由继承自特定的类或实现特定的接口, 而是由它&amp;quot;当前方法和属性的集合&amp;quot;决定. Go 作为一种静态语言, 通过接口实现了 鸭子类型, 实际上是 Go 的编译器在其中作了隐匿的转换工作.
值接收者和指针接收者的区别 package main import &amp;#34;fmt&amp;#34; type Person struct { age int } func (p Person) howOld() int { return p.age } func (p *Person) growUp() { p.</description>
    </item>
    
    <item>
      <title>文字超出显示省略号</title>
      <link>https://rx-78-kum0.github.io/post/css/%E6%96%87%E5%AD%97%E8%B6%85%E5%87%BA%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/css/%E6%96%87%E5%AD%97%E8%B6%85%E5%87%BA%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/</guid>
      <description>// 文字超出省略号 .text-overflow { overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } // 文字超出两行省略号, block元素 .text-overflow-2 { word-break: break-all; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; line-clamp: 2; -webkit-box-orient: vertical; } </description>
    </item>
    
    <item>
      <title>多线程</title>
      <link>https://rx-78-kum0.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>线程: 执行指令序列 保留了并发的优点, 避免了进程切换的代价. 实质: 映射表不变, PC指针变.
价值, 用处 浏览器
 一个线程用来从服务器接收数据 一个线程用来显示文本 一个线程用来处理图片(解压缩) 一个线程用来显示图片  接收数据线程等待时可以切换到另一个线程(如显示文本), 更加高效利用CPU, 程序交互更加人性化.
线程切换 多线程执行互不干扰, 所以一个线程执行序列对应一个(或套)栈. 线程切换就是切换TCB.
TCB (Thread Control Block) 保存线程的信息(执行序列的栈). 与PCB相似, 只是比PCB储存的信息少而已.
用户级线程 用户态切来切去. CPL为3. TCB在用户程序中.
void ThreadCeate(A) { TCB *tcb = malloc(); // 申请内存创建TCB  *stack = malloc(); // 创建栈  *stack = A; // 保存栈  tcb.esp = stack } // 线程切换 void Yield() { TCB2.esp = esp; esp = TCB1.</description>
    </item>
    
    <item>
      <title>多进程</title>
      <link>https://rx-78-kum0.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%A4%9A%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%A4%9A%E8%BF%9B%E7%A8%8B/</guid>
      <description>进程: 进行中的程序 进行中的程序与磁盘中的静态程序不一样. 进程是描述一个运行中的程序. 进程 = 资源(映射表) + 多个执行指令序列(线程) 进程只能在内核. 要分配资源, 访问文件.
 有开始, 结束 走走停停(切换) 需要记录  为了充分使用CPU 一次IO操作对应数百万(很多很多)次CPU计算操作. 为了充分合理使用CPU, 需要多个进程交替执行. &amp;ndash; [并发]
多进程是操作系统的核心 操作系统的核心就是记录, 管理, 合理推进多个进程. 使用计算机就是启用多个进程.
多进程的组织 PCB + 状态 + 队列
PCB(Proess Control Block) 记录进程信息的数据结构. 便于切回时继续执行.
状态  就绪态 阻塞态 运行态  就绪态 &amp;mdash;&amp;mdash;&amp;ndash;&amp;raquo; 运行态 \ / \ / 阻塞态
队列  就绪队列 PCB1 &amp;ndash; PCB3 &amp;ndash; PCB5 磁盘等待队列 PCB2 &amp;ndash; PCB4 &amp;ndash; PCB6  多进程的交替 队列 + 调度 + 切换</description>
    </item>
    
    <item>
      <title>Typescript元编程</title>
      <link>https://rx-78-kum0.github.io/post/typescript/typescript%E5%85%83%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/typescript/typescript%E5%85%83%E7%BC%96%E7%A8%8B/</guid>
      <description>// 硬编码一个二进制 trie type BinaryTrie = [ [ [ [ [[[[0, 1], [2, 3]], [[4, 5], [6, 7]]], [[[8, 9], [10, 11]], [[12, 13], [14, 15]]]], [[[[16, 17], [18, 19]], [[20, 21], [22, 23]]], [[[24, 25], [26, 27]], [[28, 29], [30, 31]]]] ], [ [[[[32, 33], [34, 35]], [[36, 37], [38, 39]]], [[[40, 41], [42, 43]], [[44, 45], [46, 47]]]], [[[[48, 49], [50, 51]], [[52, 53], [54, 55]]], [[[56, 57], [58, 59]], [[60, 61], [62, 63]]]] ] ], [ [ [[[[64, 65], [66, 67]], [[68, 69], [70, 71]]], [[[72, 73], [74, 75]], [[76, 77], [78, 79]]]], [[[[80, 81], [82, 83]], [[84, 85], [86, 87]]], [[[88, 89], [90, 91]], [[92, 93], [94, 95]]]] ], [ [[[[96, 97], [98, 99]], [[100, 101], [102, 103]]], [[[104, 105], [106, 107]], [[108, 109], [110, 111]]]], [[[[112, 113], [114, 115]], [[116, 117], [118, 119]]], [[[120, 121], [122, 123]], [[124, 125], [126, 127]]]] ] ] ], [ [ [ [[[[128, 129], [130, 131]], [[132, 133], [134, 135]]], [[[136, 137], [138, 139]], [[140, 141], [142, 143]]]], [[[[144, 145], [146, 147]], [[148, 149], [150, 151]]], [[[152, 153], [154, 155]], [[156, 157], [158, 159]]]] ], [ [[[[160, 161], [162, 163]], [[164, 165], [166, 167]]], [[[168, 169], [170, 171]], [[172, 173], [174, 175]]]], [[[[176, 177], [178, 179]], [[180, 181], [182, 183]]], [[[184, 185], [186, 187]], [[188, 189], [190, 191]]]] ] ], [ [ [[[[192, 193], [194, 195]], [[196, 197], [198, 199]]], [[[200, 201], [202, 203]], [[204, 205], [206, 207]]]], [[[[208, 209], [210, 211]], [[212, 213], [214, 215]]], [[[216, 217], [218, 219]], [[220, 221], [222, 223]]]] ], [ [[[[224, 225], [226, 227]], [[228, 229], [230, 231]]], [[[232, 233], [234, 235]], [[236, 237], [238, 239]]]], [[[[240, 241], [242, 243]], [[244, 245], [246, 247]]], [[[248, 249], [250, 251]], [[252, 253], [254, 255]]]] ] ] ] ]; // 数组操作 type Copy&amp;lt;T, S extends any&amp;gt; = { [P in keyof T]: S[P] }; type Unshift&amp;lt;T, A&amp;gt; = ((a: A, .</description>
    </item>
    
    <item>
      <title>clang-format</title>
      <link>https://rx-78-kum0.github.io/post/configuration/clang-format/</link>
      <pubDate>Tue, 25 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/configuration/clang-format/</guid>
      <description># .clang-format BasedOnStyle: LLVM Language:	Cpp IndentWidth : 2 # 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行) AlignAfterOpenBracket:	Align # 大括号换行，只有当BreakBeforeBraces设置为Custom时才有效 BraceWrapping: # class定义后面 AfterClass:	false # 控制语句后面 AfterControlStatement:	false # enum定义后面 AfterEnum:	false # 函数定义后面 AfterFunction:	true # 命名空间定义后面 AfterNamespace:	false # ObjC定义后面 AfterObjCDeclaration:	false # struct定义后面 AfterStruct:	false # union定义后面 AfterUnion:	false # catch之前 BeforeCatch:	true # else之前 BeforeElse:	true # 缩进大括号 IndentBraces:	false BreakBeforeBraces:	Custom </description>
    </item>
    
    <item>
      <title>myclirc</title>
      <link>https://rx-78-kum0.github.io/post/configuration/myclirc/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/configuration/myclirc/</guid>
      <description># vi: ft=dosini [main] # Enables context sensitive auto-completion. If this is disabled the all # possible completions will be listed. smart_completion = True # Multi-line mode allows breaking up the sql statements into multiple lines. If # this is set to True, then the end of the statements must have a semi-colon. # If this is set to False then sql statements can&amp;#39;t be split into multiple # lines. End of line (return) is considered as the end of the statement.</description>
    </item>
    
    <item>
      <title>Angular自定义双向绑定表单组件</title>
      <link>https://rx-78-kum0.github.io/post/angular/angular%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/angular/angular%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/</guid>
      <description>angular的ControlValueAccessor是一个连接表单模型和视图DOM的抽象类接口
使自定义表单组件像原生input一样映射到form表单模型中, 拥有自定义表单组件的form也能使用响应式表单. (也就是使自定义表单组件拥有formControlName属性和ngModel接口.)
毕竟响应式表单才是angular的利器.
ControlValueAccessor export interface ControlValueAccessor { writeValue(obj: any): void; registerOnChange(fn: any): void; registerOnTouched(fn: any): void; setDisabledState?(isDisabled: boolean): void; } writeValue(obj: any): 该方法是接收模版中的ngModel.
writeValue(value: any): void { this._renderer.setProperty(this._elementRef.nativeElement, &amp;#39;value&amp;#39;, value); } registerOnChange(fn: any): void: 该方法是组件接收到 change 事件的回调, 可以用来通知外部达成双向绑定, 即ngModelChange.
registerOnChange(fn: (_: any) =&amp;gt; void): void { this._onChange = fn; } registerOnTouched(fn: any): 接收到 touched 事件的回调.
registerOnTouched(fn: any): void { this._onTouched = fn; } setDisabledState?(isDisabled: boolean): 该方法是组件输入状态 disable &amp;lt;=&amp;gt; enable 变化时的回调。该方法会根据参数值，启用或禁用指定的DOM元素.</description>
    </item>
    
    <item>
      <title>vimrc</title>
      <link>https://rx-78-kum0.github.io/post/configuration/vimrc/</link>
      <pubDate>Tue, 04 Jun 2019 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/configuration/vimrc/</guid>
      <description>&amp;#34; .vimrc &amp;#34; Configuration file for vim set modelines=0 &amp;#34; Don&amp;#39;t write backup file if vim is being called by &amp;#34;crontab -e&amp;#34; &amp;#34; au BufWrite /private/tmp/crontab.* set nowritebackup nobackup &amp;#34; Don&amp;#39;t write backup file if vim is being called by &amp;#34;chpass&amp;#34; &amp;#34; au BufWrite /private/etc/pw.* set nowritebackup nobackup set nobackup set nowritebackup let skip_defaults_vim=1 &amp;#34; &amp;lt;leader&amp;gt; let g:mapleader=&amp;#34;,&amp;#34; &amp;#34; 去掉有关vi一致性模式，避免以前版本的bug和局限 set nocompatible &amp;#34; 设置退格键可用 set backspace=2 &amp;#34; utf-8 set encoding=UTF-8 &amp;#34; 主题 &amp;#34; set background=dark &amp;#34; colorscheme dracula &amp;#34; 函数方法名加粗 let g:enable_bold_font = 1 &amp;#34; 注释斜体 let g:enable_italic_font = 1 &amp;#34; 透明背景 let g:hybrid_transparent_background = 1 &amp;#34; airline_theme let g:airline_theme = &amp;#34;hybrid&amp;#34; &amp;#34; 行号 set nu!</description>
    </item>
    
    <item>
      <title>一个包含 nil 指针的接口不是 nil 接口</title>
      <link>https://rx-78-kum0.github.io/post/golang/%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB-nil-%E6%8C%87%E9%92%88%E7%9A%84%E6%8E%A5%E5%8F%A3%E4%B8%8D%E6%98%AF-nil-%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/golang/%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB-nil-%E6%8C%87%E9%92%88%E7%9A%84%E6%8E%A5%E5%8F%A3%E4%B8%8D%E6%98%AF-nil-%E6%8E%A5%E5%8F%A3/</guid>
      <description>golang 接口值: 一个包含 nil 指针的接口不是 nil 接口.
一个不包含任何值的 nil 接口值和一个刚好包含 nil 指针的接口值是不同的.
 接口值由两个部分组成:
 一个具体的类型 那个类型的值  它们被称为接口的动态类型和动态值.
   type value     x x    接口的零值是指动态类型为nil, 动态值也为nil.
   type value     nil nil    这样的接口才能满足 接口值 == nil.
var a interface{} fmt.Println(a == nil) // true 一个不包含任何值的 nil 接口值: interface 类型变量的动态类型和动态值都为 nil. 比如 nil, 或者:</description>
    </item>
    
    <item>
      <title>vscode</title>
      <link>https://rx-78-kum0.github.io/post/configuration/vscode/</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/configuration/vscode/</guid>
      <description>{ // editor &amp;#34;editor.fontSize&amp;#34;: 14, &amp;#34;editor.snippetSuggestions&amp;#34;: &amp;#34;top&amp;#34;, &amp;#34;editor.formatOnSave&amp;#34;: true, &amp;#34;explorer.confirmDragAndDrop&amp;#34;: true, &amp;#34;explorer.confirmDelete&amp;#34;: false, &amp;#34;editor.detectIndentation&amp;#34;: false, &amp;#34;files.autoSave&amp;#34;: &amp;#34;off&amp;#34;, // &amp;#34;editor.fontFamily&amp;#34;: &amp;#34;&amp;#39;FuraCode&amp;#39;, Menlo, Monaco, &amp;#39;Courier New&amp;#39;, monospace&amp;#34;, &amp;#34;editor.fontLigatures&amp;#34;: true, &amp;#34;workbench.iconTheme&amp;#34;: &amp;#34;material-icon-theme&amp;#34;, &amp;#34;workbench.colorTheme&amp;#34;: &amp;#34;Nebula&amp;#34;, // prettier &amp;#34;prettier.printWidth&amp;#34;: 120, &amp;#34;editor.tabSize&amp;#34;: 2, &amp;#34;prettier.singleQuote&amp;#34;: true, &amp;#34;prettier.semi&amp;#34;: true, // typescript &amp;#34;typescript.updateImportsOnFileMove.enabled&amp;#34;: &amp;#34;always&amp;#34;, // emmet &amp;#34;emmet.includeLanguages&amp;#34;: { &amp;#34;javascript&amp;#34;: &amp;#34;javascriptreact&amp;#34;, &amp;#34;typescript&amp;#34;: &amp;#34;typescriptreact&amp;#34; }, &amp;#34;emmet.triggerExpansionOnTab&amp;#34;: true, // 装饰器 &amp;#34;javascript.implicitProjectConfig.experimentalDecorators&amp;#34;: true, // stylus &amp;#34;stylusSupremacy.insertColons&amp;#34;: false, // 是否插入冒号 &amp;#34;stylusSupremacy.insertSemicolons&amp;#34;: false, // 是否插入分好 &amp;#34;stylusSupremacy.</description>
    </item>
    
  </channel>
</rss>