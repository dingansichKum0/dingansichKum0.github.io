<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>汇编 on rx-78-kum0</title>
    <link>https://rx-78-kum0.github.io/categories/%E6%B1%87%E7%BC%96/</link>
    <description>Recent content in 汇编 on rx-78-kum0</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Jun 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://rx-78-kum0.github.io/categories/%E6%B1%87%E7%BC%96/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>变量和标签</title>
      <link>https://rx-78-kum0.github.io/post/%E6%B1%87%E7%BC%96/%E5%8F%98%E9%87%8F%E5%92%8C%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/%E6%B1%87%E7%BC%96/%E5%8F%98%E9%87%8F%E5%92%8C%E6%A0%87%E7%AD%BE/</guid>
      <description>标签(Label) 指向一大块的首地址。使用方法: LABEL_NAME: XXX XXX
局部Label 以(点)开头，比如.begin，.1，.2。在不同的段中可以使用相同的带点开头的LABEL，不能重复。最好只用在代码段中。
变量 函数变量 指的是一个SUB_RUTIN的首地址。比如DispStr，使用的时候是call DispStr，然后在声明时候因为它本来就是一个地址，就是用上面标签的同样的声明方式。 DispStr:（注意后面有冒号）
普通变量 使用equ生成的纯的变量(宏) 比如：TopOfStack equ $ - LABEL_STACK - 1
使用db dd dw生成的变量(地址) 生成的各种变量分别指向的是不同的数据类型(冒号可加可不加) 比如： _dwDispPos: dd (80 * 6 + 0) * 2</description>
    </item>
    
    <item>
      <title>mac编译nasm问题汇总</title>
      <link>https://rx-78-kum0.github.io/post/%E6%B1%87%E7%BC%96/mac%E7%BC%96%E8%AF%91nasm%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/%E6%B1%87%E7%BC%96/mac%E7%BC%96%E8%AF%91nasm%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      <description>ld: dynamic main executables must link with libSystem.dylib for architecture x86_64 # -lSystem ld a.o -o a -lSystem </description>
    </item>
    
    <item>
      <title>汇编语言种类</title>
      <link>https://rx-78-kum0.github.io/post/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A7%8D%E7%B1%BB/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/%E6%B1%87%E7%BC%96/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A7%8D%E7%B1%BB/</guid>
      <description>汇编语言种类 汇编语言和CPU息息相关，但是不能把汇编语言完全等同于CPU的机器指令。不同架构的CPU指令并不相同，如x86，powerpc，arm各有各的指令系统；甚至同一种架构的CPU有几套指令集，典型的如arm除了有32位的指令集外，还有一套16位的thumb指令集。但是作为开发语言的汇编，本质上是一套语法规则和助记符的集合，它可以包容不同的指令集。如果从CPU体系来划分，常见的汇编有两种：IBM PC汇编和ARM汇编。 IBM PC汇编也就是Intel的汇编，因为IBM 最早推出PC机，后来的体系很多都要和它兼容，所以也使用了相同的汇编语言。ARM压根没考虑过兼容，它的指令集和x86完全是两个体系，所以汇编语言也独立发展出一套。 CPU只是限定了机器码，作为开发语言的汇编，其实还和编译器息息相关。汇编语言出现的早，没有像C语言一样定义出标准，所以编译器的厂商各搞一套。到现在，最有名的也是两家：MASM和GNU ASM。前者是微软的，只支持x86，用在DOS/Windows平台中；后者是开源产品，主要用在Linux中，基本上支持大部分的CPU架构。这两者的区别在于伪指令的不同，伪指令是用来告诉编译器如何工作的，和编译器相关，和CPU无关。其实汇编的编译相当简单，这两套伪指令只是符号不相同，含义是大同小异，明白了一种，看另一种就很容易了。
从汇编格式分，还有Intel格式和AT&amp;amp;T格式的区别，前者是Intel的，windows平台常见，后者最早由贝尔实验室推出，用于Unix中，GUN汇编器的缺省格式就是AT&amp;amp;T。不过GNU的汇编器和调试器gdb对这两种格式都支持，可以随便切换。MASM只支持Intel格式。Intel格式和AT&amp;amp;T格式的区别只是符号系统的区别，这与x86和arm的区别可不一样，后者是CPU体系的区别。最后谈谈内嵌汇编，它是用于C语言和汇编语言混合编程的，所以和编译器也关系紧密，目前也是有两种，GNU的内嵌汇编和MASM的内嵌汇编，它们的语法和普通汇编是有区别的，特别是GNU的内嵌汇编不是很容易看懂，需要专门学习才行。MASM的内嵌汇编和普通汇编的区别则不大。
CPU体系分类  IBM PC汇编 ARM汇编  汇编格式分类  Intel格式 (MASM只支持Intel格式) AT&amp;amp;T格式  内嵌汇编  GNU的内嵌汇编 MASM的内嵌汇编 (MASM的内嵌汇编和普通汇编的区别则不大)  </description>
    </item>
    
  </channel>
</rss>