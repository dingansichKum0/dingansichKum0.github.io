<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>typescript on 谟涅摩绪涅📖</title>
    <link>https://rx-78-kum0.github.io/tags/typescript/</link>
    <description>Recent content in typescript on 谟涅摩绪涅📖</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 21 May 2021 00:00:00 +0800</lastBuildDate>
    
        <atom:link href="https://rx-78-kum0.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>手把手教你读财报</title>
      <link>https://rx-78-kum0.github.io/2021/06/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E8%AF%BB%E8%B4%A2%E6%8A%A5/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2021/06/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E8%AF%BB%E8%B4%A2%E6%8A%A5/</guid>
      <description>要点 会计政策的改变； 会计事务所出具 “标准无保留意见”； 上市时间长于5年； 某科目出现大比例变化，查看附注； 与同行对比； 关注的重点 财务会计报告 董</description>
    </item>
    
    <item>
      <title>golang并发写slice</title>
      <link>https://rx-78-kum0.github.io/2021/05/golang%E5%B9%B6%E5%8F%91%E5%86%99slice/</link>
      <pubDate>Fri, 21 May 2021 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2021/05/golang%E5%B9%B6%E5%8F%91%E5%86%99slice/</guid>
      <description>package sliceSafe type SliceSafe struct { channel chan int `desc:&amp;quot;即将加入到数据slice的数据&amp;quot;` data []int `desc:&amp;quot;数据slice&amp;quot;</description>
    </item>
    
    <item>
      <title>常用的typescript类型推导公式</title>
      <link>https://rx-78-kum0.github.io/2021/05/%E5%B8%B8%E7%94%A8%E7%9A%84typescript%E7%B1%BB%E5%9E%8B%E5%85%AC%E5%BC%8F/</link>
      <pubDate>Fri, 21 May 2021 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2021/05/%E5%B8%B8%E7%94%A8%E7%9A%84typescript%E7%B1%BB%E5%9E%8B%E5%85%AC%E5%BC%8F/</guid>
      <description>函数参数类型 type FuncParamsType&amp;lt;T&amp;gt; = T extends (arg: infer P) =&amp;gt; void ? P : string; function func(arg: string) {} type ParamsType = FuncParamsType&amp;lt;typeof func&amp;gt;; // ParamsType: string 函数返回值类型 type FuncReturnType&amp;lt;T&amp;gt; = T extends (arg: any) =&amp;gt; infer P ? P : string; function func(arg: string): number {} type ReturnType = FuncReturnType&amp;lt;typeof func&amp;gt;; // ReturnType: number 数组成员</description>
    </item>
    
    <item>
      <title>H5复制文字到剪切板</title>
      <link>https://rx-78-kum0.github.io/2020/08/h5%E5%A4%8D%E5%88%B6%E6%96%87%E5%AD%97%E5%88%B0%E5%89%AA%E5%88%87%E6%9D%BF/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/08/h5%E5%A4%8D%E5%88%B6%E6%96%87%E5%AD%97%E5%88%B0%E5%89%AA%E5%88%87%E6%9D%BF/</guid>
      <description>// 复制文字 // copyText(&#39;h5实现一键复制到粘贴板 兼容ios&#39;) /*兼容性补充： 移动端： 安卓手机: 微信（chrome）和几个手机浏览器</description>
    </item>
    
    <item>
      <title>在博客养一只猫</title>
      <link>https://rx-78-kum0.github.io/2020/07/%E5%9C%A8%E5%8D%9A%E5%AE%A2%E5%85%BB%E4%B8%80%E5%8F%AA%E7%8C%AB/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/07/%E5%9C%A8%E5%8D%9A%E5%AE%A2%E5%85%BB%E4%B8%80%E5%8F%AA%E7%8C%AB/</guid>
      <description>从今天起这里多了一只白色，高冷的看门喵。视线会一直跟着你的鼠标，鼠标靠近它就可以撸了！ 目前只设定让它在PC出现，在移动端显示有些突兀。 养猫攻</description>
    </item>
    
    <item>
      <title>emacs管理博客写作流程</title>
      <link>https://rx-78-kum0.github.io/2020/07/emacs%E7%AE%A1%E7%90%86%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/07/emacs%E7%AE%A1%E7%90%86%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E6%B5%81%E7%A8%8B/</guid>
      <description>使用emacs作为hugo博客的客户端 Hugo 生成博客的静态页面虽然已经很方便了，ox-hugo 自动md -&amp;gt; org也很便捷了，但写作和发布博客需要经</description>
    </item>
    
    <item>
      <title>redis发布订阅</title>
      <link>https://rx-78-kum0.github.io/2020/07/redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/07/redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</guid>
      <description>redis发布订阅 相比rabbitmq等专业消息队列的缺陷: 没有相应的机制保证消息的可靠消费，如果发布者发布一条消息，而没有对应的订阅者的话</description>
    </item>
    
    <item>
      <title>限制goroutine数量</title>
      <link>https://rx-78-kum0.github.io/2020/07/%E9%99%90%E5%88%B6goroutine%E6%95%B0%E9%87%8F/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/07/%E9%99%90%E5%88%B6goroutine%E6%95%B0%E9%87%8F/</guid>
      <description>package main import ( &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;time&amp;quot; ) type Glimit struct { n int c chan struct{} } func New(n int) *Glimit { return &amp;amp;Glimit{ n: n, c: make(chan struct{}, n), } } func (g *Glimit) Run(f func()) { g.c &amp;lt;- struct{}{} go func() { f() &amp;lt;-g.c }() } var wg = sync.WaitGroup{} func main() { number := 10 g := New(2) for i := 0; i &amp;lt; number; i++</description>
    </item>
    
    <item>
      <title>golang gc优化</title>
      <link>https://rx-78-kum0.github.io/2020/06/gc%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/06/gc%E4%BC%98%E5%8C%96/</guid>
      <description>小对象要合并 函数频繁创建的简单的对象，直接返回对象，效果比返回指针效果要好 类型转换要注意，官方用法消耗特别大。 package string_util import ( &amp;quot;unsafe&amp;quot; ) func str2bytes(s string) []byte { x := (*[2]uintptr)(unsafe.Pointer(&amp;amp;s)) h</description>
    </item>
    
    <item>
      <title>golang time工具函数</title>
      <link>https://rx-78-kum0.github.io/2020/06/time/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/06/time/</guid>
      <description>package util-time import ( &amp;quot;strconv&amp;quot; &amp;quot;time&amp;quot; ) // 获取当前的时间 - 字符串 func GetCurrentDate() string { return time.Now().Format(&amp;quot;2006/01/02 15:04:05&amp;quot;) } // 获取当前的时间 - Unix时间戳 func GetCurrentUnix() int64 { return time.Now().Unix() } // 获取当前的时间 - 毫秒级时间戳 func GetCurrentMilliUnix() int64 { return</description>
    </item>
    
    <item>
      <title>GDT&amp;LDT</title>
      <link>https://rx-78-kum0.github.io/2020/06/gdtldt/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/06/gdtldt/</guid>
      <description>GDT(Global Descriptor Table)全局描述符表 GDT是一个以 段描述符 为表项的数组类型的数据结构，在内存中线性存放。每个段描述符占 8 个字节。 GDTR寄存器存放G</description>
    </item>
    
    <item>
      <title>获取用户home目录路径</title>
      <link>https://rx-78-kum0.github.io/2020/06/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7home%E7%9B%AE%E5%BD%95%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/06/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7home%E7%9B%AE%E5%BD%95%E8%B7%AF%E5%BE%84/</guid>
      <description>func Home() (string, error) { user, err := user.Current() if nil == err { return user.HomeDir, nil } // cross compile support if runtime.GOOS == &amp;quot;windows&amp;quot; { return homeWindows() } // Unix-like system, so just assume Unix return homeUnix() } func homeUnix() (string, error) { // First prefer the HOME environmental variable if home := os.Getenv(&amp;quot;HOME&amp;quot;); home != &amp;quot;&amp;quot; { return home, nil } // If that fails, try the</description>
    </item>
    
    <item>
      <title>变量和标签</title>
      <link>https://rx-78-kum0.github.io/2020/06/%E5%8F%98%E9%87%8F%E5%92%8C%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/06/%E5%8F%98%E9%87%8F%E5%92%8C%E6%A0%87%E7%AD%BE/</guid>
      <description>标签(Label) 指向一大块的首地址。使用方法: LABEL_NAME: XXX XXX 局部Label 以(点)开头，比如.begin，.1，.2。在不同的段中可以使用相同的带</description>
    </item>
    
    <item>
      <title>irony-server-install</title>
      <link>https://rx-78-kum0.github.io/2020/05/irony-server-install/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/05/irony-server-install/</guid>
      <description>Mac 首先需安装cmake和llvm brew install cmake llvm emacs里执行M-x irony-install-server得到安装执行命令 cmake -DCMAKE_INSTALL_PREFIX\=/Users/kumotyou/.emacs.d/irony/ \ /Users/kumotyou/.emacs.d/elpa/irony-20200130.849/server \ &amp;amp;&amp;amp; cmake --build . --use-stderr --config</description>
    </item>
    
    <item>
      <title>bochsrc</title>
      <link>https://rx-78-kum0.github.io/2020/05/bochsrc/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/05/bochsrc/</guid>
      <description>############################################################### # Configuration file for Bochs ############################################################### # how much memory the emulated machine will have megs: 32 # filename of ROM images romimage: file=/usr/local/share/bochs/BIOS-bochs-latest vgaromimage: file=/usr/local/share/bochs/VGABIOS-lgpl-latest # what disk images will be used floppya: 1_44=a.img, status=inserted # choose the boot disk. boot: floppy # where do we send log messages? # log: bochsout.txt # disable the mouse mouse: enabled=0 # enable key mapping, using US layout as default. #</description>
    </item>
    
    <item>
      <title>mac编译nasm问题汇总</title>
      <link>https://rx-78-kum0.github.io/2020/05/mac%E7%BC%96%E8%AF%91nasm%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/05/mac%E7%BC%96%E8%AF%91nasm%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      <description>ld: dynamic main executables must link with libSystem.dylib for architecture x86_64 # -lSystem ld a.o -o a -lSystem</description>
    </item>
    
    <item>
      <title>汇编语言种类</title>
      <link>https://rx-78-kum0.github.io/2020/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A7%8D%E7%B1%BB/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E7%A7%8D%E7%B1%BB/</guid>
      <description>汇编语言和CPU息息相关，但是不能把汇编语言完全等同于CPU的机器指令。不同架构的CPU指令并不相同，如x86，powerpc，arm各有各</description>
    </item>
    
    <item>
      <title>docker部署mysql问题汇总</title>
      <link>https://rx-78-kum0.github.io/2020/05/docker%E9%83%A8%E7%BD%B2mysql%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/05/docker%E9%83%A8%E7%BD%B2mysql%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</guid>
      <description>docker-compose 配置 version: &#39;3&#39; services: # mysql blog_mysql: image: mysql restart: always ports: - &#39;3306:3306&#39; environment: - MYSQL_ROOT_PASSWORD=xxxx volumes: - &#39;/data/mysql:/var/lib/mysql&#39; docker 安装完mysql 后客户端无法访问 进入镜像中的mysql docker exec -it container_id /bin/bash 登录mysql mysql -u root -p 修改ro</description>
    </item>
    
    <item>
      <title>flex宽度失效</title>
      <link>https://rx-78-kum0.github.io/2020/04/flex%E5%AE%BD%E5%BA%A6%E5%A4%B1%E6%95%88/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/04/flex%E5%AE%BD%E5%BA%A6%E5%A4%B1%E6%95%88/</guid>
      <description>.flex { flex-shrink: 0; }</description>
    </item>
    
    <item>
      <title>canvas-drawImage</title>
      <link>https://rx-78-kum0.github.io/2020/03/canvas-drawimage/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/2020/03/canvas-drawimage/</guid>
      <description>context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height); img 规定要使用的图像, 画布或视频. sx 可选. 开始剪切的 x 坐标位置. sy 可选. 开始剪切的 y 坐标位置. swidth 可选. 被剪切图像的宽度. sheight 可选. 被剪切图像的</description>
    </item>
    
  </channel>
</rss>
