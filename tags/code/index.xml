<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code on rx-78-kum0</title>
    <link>https://rx-78-kum0.github.io/tags/code/</link>
    <description>Recent content in code on rx-78-kum0</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jun 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://rx-78-kum0.github.io/tags/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang gc优化</title>
      <link>https://rx-78-kum0.github.io/post/golang/gc%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/golang/gc%E4%BC%98%E5%8C%96/</guid>
      <description>小对象要合并 函数频繁创建的简单的对象，直接返回对象，效果比返回指针效果要好 类型转换要注意，官方用法消耗特别大。 package string_util import ( &amp;#34;unsafe&amp;#34; ) func str2bytes(s string) []byte { x := (*[2]uintptr)(unsafe.Pointer(&amp;amp;s)) h := [3]uintptr{x[0], x[1], x[1]} return *(*[]byte)(unsafe.Pointer(&amp;amp;h)) } func bytes2str(b []byte) string { return *(*string)(unsafe.Pointer(&amp;amp;b)) } 避免反复创建slice，map func(r*Reader)Read()([]byte,error) // 此函数没有形参，每次调用的时候返回一个[]byte。 func(r*Reader)Read(buf[]byte)(int,error) // 此函数个函数在每次迪调用的时候，会重用形参声明。  避免使用&amp;quot;+&amp;quot;拼接字符串 package string_utils import ( &amp;#34;strings&amp;#34; ) func strAppend(s string, ss ...string) string { var r strings.Builder r.WriteString(s) for _, v := range ss { r.WriteString(v) } return r.String() } </description>
    </item>
    
    <item>
      <title>golang time工具函数</title>
      <link>https://rx-78-kum0.github.io/post/golang/time/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/golang/time/</guid>
      <description>package util-time import ( &amp;#34;strconv&amp;#34; &amp;#34;time&amp;#34; ) // 获取当前的时间 - 字符串 func GetCurrentDate() string { return time.Now().Format(&amp;#34;2006/01/02 15:04:05&amp;#34;) } // 获取当前的时间 - Unix时间戳 func GetCurrentUnix() int64 { return time.Now().Unix() } // 获取当前的时间 - 毫秒级时间戳 func GetCurrentMilliUnix() int64 { return time.Now().UnixNano() / 1000000 } // 获取当前的时间 - 纳秒级时间戳 func GetCurrentNanoUnix() int64 { return time.Now().UnixNano() } func GetCurrentTime() string { var cstSh, _ = time.LoadLocation(&amp;#34;Asia/Shanghai&amp;#34;) t := time.Now().In(cstSh).Format(&amp;#34;2006/01/02/ 15:04:05&amp;#34;) return t } func GetCurrentHour() int { var cstSh, _ = time.</description>
    </item>
    
    <item>
      <title>获取用户home目录路径</title>
      <link>https://rx-78-kum0.github.io/post/golang/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7home%E7%9B%AE%E5%BD%95%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/golang/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7home%E7%9B%AE%E5%BD%95%E8%B7%AF%E5%BE%84/</guid>
      <description>func Home() (string, error) { user, err := user.Current() if nil == err { return user.HomeDir, nil } // cross compile support  if runtime.GOOS == &amp;#34;windows&amp;#34; { return homeWindows() } // Unix-like system, so just assume Unix  return homeUnix() } func homeUnix() (string, error) { // First prefer the HOME environmental variable  if home := os.Getenv(&amp;#34;HOME&amp;#34;); home != &amp;#34;&amp;#34; { return home, nil } // If that fails, try the shell  var stdout bytes.</description>
    </item>
    
    <item>
      <title>canvas-drawImage</title>
      <link>https://rx-78-kum0.github.io/post/web/canvas-drawimage/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/web/canvas-drawimage/</guid>
      <description>context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);  img 规定要使用的图像, 画布或视频. sx 可选. 开始剪切的 x 坐标位置. sy 可选. 开始剪切的 y 坐标位置. swidth 可选. 被剪切图像的宽度. sheight 可选. 被剪切图像的高度. x 在画布上放置图像的 x 坐标位置. y 在画布上放置图像的 y 坐标位置. width 可选. 要使用的图像的宽度.(伸展或缩小图像) height 可选. 要使用的图像的高度.(伸展或缩小图像)  </description>
    </item>
    
    <item>
      <title>浏览器显示emoji</title>
      <link>https://rx-78-kum0.github.io/post/web/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%BE%E7%A4%BAemoji/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/web/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%BE%E7%A4%BAemoji/</guid>
      <description>// js 表情emoji转码 // 发送请求时将uft16转为utf-8 function utf16toEntities(str) { var patt = /[\ud800-\udbff][\udc00-\udfff]/g; // 检测utf16字符正则  return str.replace(patt, function(char) { var H, L, code; if (char.length === 2) { H = char.charCodeAt(0); // 取出高位  L = char.charCodeAt(1); // 取出低位  code = (H - 0xd800) * 0x400 + 0x10000 + L - 0xdc00; // 转换算法  return &amp;#39;&amp;amp;#&amp;#39; + code + &amp;#39;;&amp;#39;; } else { return char; } }); } // 收到后端的数据时展示emoji function entitiesToUtf16(str) { return str.</description>
    </item>
    
    <item>
      <title>interface类型</title>
      <link>https://rx-78-kum0.github.io/post/golang/interface%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/golang/interface%E7%B1%BB%E5%9E%8B/</guid>
      <description>Go 语言与鸭子类型的关系  If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.
如果某个东西长得像鸭子, 像鸭子一样游泳, 像鸭子一样嘎嘎叫, 那它就可以被看成是一只鸭子.
在 Go 语言中, 如果类型的方法集完全包含接口的方法集，则可认为该类型实现了该接口.
 鸭子类型是一种动态语言的风格, 在这种风格中, 一个对象有效的语义, 不是由继承自特定的类或实现特定的接口, 而是由它&amp;quot;当前方法和属性的集合&amp;quot;决定. Go 作为一种静态语言, 通过接口实现了 鸭子类型, 实际上是 Go 的编译器在其中作了隐匿的转换工作.
值接收者和指针接收者的区别 package main import &amp;#34;fmt&amp;#34; type Person struct { age int } func (p Person) howOld() int { return p.age } func (p *Person) growUp() { p.</description>
    </item>
    
    <item>
      <title>多线程</title>
      <link>https://rx-78-kum0.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>线程: 执行指令序列 保留了并发的优点, 避免了进程切换的代价. 实质: 映射表不变, PC指针变.
价值, 用处 浏览器
 一个线程用来从服务器接收数据 一个线程用来显示文本 一个线程用来处理图片(解压缩) 一个线程用来显示图片  接收数据线程等待时可以切换到另一个线程(如显示文本), 更加高效利用CPU, 程序交互更加人性化.
线程切换 多线程执行互不干扰, 所以一个线程执行序列对应一个(或套)栈. 线程切换就是切换TCB.
TCB (Thread Control Block) 保存线程的信息(执行序列的栈). 与PCB相似, 只是比PCB储存的信息少而已.
用户级线程 用户态切来切去. CPL为3. TCB在用户程序中.
void ThreadCeate(A) { TCB *tcb = malloc(); // 申请内存创建TCB  *stack = malloc(); // 创建栈  *stack = A; // 保存栈  tcb.esp = stack } // 线程切换 void Yield() { TCB2.esp = esp; esp = TCB1.</description>
    </item>
    
    <item>
      <title>多进程</title>
      <link>https://rx-78-kum0.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%A4%9A%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%A4%9A%E8%BF%9B%E7%A8%8B/</guid>
      <description>进程: 进行中的程序 进行中的程序与磁盘中的静态程序不一样. 进程是描述一个运行中的程序. 进程 = 资源(映射表) + 多个执行指令序列(线程) 进程只能在内核. 要分配资源, 访问文件.
 有开始, 结束 走走停停(切换) 需要记录  为了充分使用CPU 一次IO操作对应数百万(很多很多)次CPU计算操作. 为了充分合理使用CPU, 需要多个进程交替执行. &amp;ndash; [并发]
多进程是操作系统的核心 操作系统的核心就是记录, 管理, 合理推进多个进程. 使用计算机就是启用多个进程.
多进程的组织 PCB + 状态 + 队列
PCB(Proess Control Block) 记录进程信息的数据结构. 便于切回时继续执行.
状态  就绪态 阻塞态 运行态  就绪态 &amp;mdash;&amp;mdash;&amp;ndash;&amp;raquo; 运行态 \ / \ / 阻塞态
队列  就绪队列 PCB1 &amp;ndash; PCB3 &amp;ndash; PCB5 磁盘等待队列 PCB2 &amp;ndash; PCB4 &amp;ndash; PCB6  多进程的交替 队列 + 调度 + 切换</description>
    </item>
    
    <item>
      <title>Typescript元编程</title>
      <link>https://rx-78-kum0.github.io/post/typescript/typescript%E5%85%83%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/typescript/typescript%E5%85%83%E7%BC%96%E7%A8%8B/</guid>
      <description>// 硬编码一个二进制 trie type BinaryTrie = [ [ [ [ [[[[0, 1], [2, 3]], [[4, 5], [6, 7]]], [[[8, 9], [10, 11]], [[12, 13], [14, 15]]]], [[[[16, 17], [18, 19]], [[20, 21], [22, 23]]], [[[24, 25], [26, 27]], [[28, 29], [30, 31]]]] ], [ [[[[32, 33], [34, 35]], [[36, 37], [38, 39]]], [[[40, 41], [42, 43]], [[44, 45], [46, 47]]]], [[[[48, 49], [50, 51]], [[52, 53], [54, 55]]], [[[56, 57], [58, 59]], [[60, 61], [62, 63]]]] ] ], [ [ [[[[64, 65], [66, 67]], [[68, 69], [70, 71]]], [[[72, 73], [74, 75]], [[76, 77], [78, 79]]]], [[[[80, 81], [82, 83]], [[84, 85], [86, 87]]], [[[88, 89], [90, 91]], [[92, 93], [94, 95]]]] ], [ [[[[96, 97], [98, 99]], [[100, 101], [102, 103]]], [[[104, 105], [106, 107]], [[108, 109], [110, 111]]]], [[[[112, 113], [114, 115]], [[116, 117], [118, 119]]], [[[120, 121], [122, 123]], [[124, 125], [126, 127]]]] ] ] ], [ [ [ [[[[128, 129], [130, 131]], [[132, 133], [134, 135]]], [[[136, 137], [138, 139]], [[140, 141], [142, 143]]]], [[[[144, 145], [146, 147]], [[148, 149], [150, 151]]], [[[152, 153], [154, 155]], [[156, 157], [158, 159]]]] ], [ [[[[160, 161], [162, 163]], [[164, 165], [166, 167]]], [[[168, 169], [170, 171]], [[172, 173], [174, 175]]]], [[[[176, 177], [178, 179]], [[180, 181], [182, 183]]], [[[184, 185], [186, 187]], [[188, 189], [190, 191]]]] ] ], [ [ [[[[192, 193], [194, 195]], [[196, 197], [198, 199]]], [[[200, 201], [202, 203]], [[204, 205], [206, 207]]]], [[[[208, 209], [210, 211]], [[212, 213], [214, 215]]], [[[216, 217], [218, 219]], [[220, 221], [222, 223]]]] ], [ [[[[224, 225], [226, 227]], [[228, 229], [230, 231]]], [[[232, 233], [234, 235]], [[236, 237], [238, 239]]]], [[[[240, 241], [242, 243]], [[244, 245], [246, 247]]], [[[248, 249], [250, 251]], [[252, 253], [254, 255]]]] ] ] ] ]; // 数组操作 type Copy&amp;lt;T, S extends any&amp;gt; = { [P in keyof T]: S[P] }; type Unshift&amp;lt;T, A&amp;gt; = ((a: A, .</description>
    </item>
    
    <item>
      <title>Angular自定义双向绑定表单组件</title>
      <link>https://rx-78-kum0.github.io/post/angular/angular%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/angular/angular%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/</guid>
      <description>angular的ControlValueAccessor是一个连接表单模型和视图DOM的抽象类接口
使自定义表单组件像原生input一样映射到form表单模型中, 拥有自定义表单组件的form也能使用响应式表单. (也就是使自定义表单组件拥有formControlName属性和ngModel接口.)
毕竟响应式表单才是angular的利器.
ControlValueAccessor export interface ControlValueAccessor { writeValue(obj: any): void; registerOnChange(fn: any): void; registerOnTouched(fn: any): void; setDisabledState?(isDisabled: boolean): void; } writeValue(obj: any): 该方法是接收模版中的ngModel.
writeValue(value: any): void { this._renderer.setProperty(this._elementRef.nativeElement, &amp;#39;value&amp;#39;, value); } registerOnChange(fn: any): void: 该方法是组件接收到 change 事件的回调, 可以用来通知外部达成双向绑定, 即ngModelChange.
registerOnChange(fn: (_: any) =&amp;gt; void): void { this._onChange = fn; } registerOnTouched(fn: any): 接收到 touched 事件的回调.
registerOnTouched(fn: any): void { this._onTouched = fn; } setDisabledState?(isDisabled: boolean): 该方法是组件输入状态 disable &amp;lt;=&amp;gt; enable 变化时的回调。该方法会根据参数值，启用或禁用指定的DOM元素.</description>
    </item>
    
    <item>
      <title>一个包含 nil 指针的接口不是 nil 接口</title>
      <link>https://rx-78-kum0.github.io/post/golang/%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB-nil-%E6%8C%87%E9%92%88%E7%9A%84%E6%8E%A5%E5%8F%A3%E4%B8%8D%E6%98%AF-nil-%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0800</pubDate>
      
      <guid>https://rx-78-kum0.github.io/post/golang/%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB-nil-%E6%8C%87%E9%92%88%E7%9A%84%E6%8E%A5%E5%8F%A3%E4%B8%8D%E6%98%AF-nil-%E6%8E%A5%E5%8F%A3/</guid>
      <description>golang 接口值: 一个包含 nil 指针的接口不是 nil 接口.
一个不包含任何值的 nil 接口值和一个刚好包含 nil 指针的接口值是不同的.
 接口值由两个部分组成:
 一个具体的类型 那个类型的值  它们被称为接口的动态类型和动态值.
   type value     x x    接口的零值是指动态类型为nil, 动态值也为nil.
   type value     nil nil    这样的接口才能满足 接口值 == nil.
var a interface{} fmt.Println(a == nil) // true 一个不包含任何值的 nil 接口值: interface 类型变量的动态类型和动态值都为 nil. 比如 nil, 或者:</description>
    </item>
    
  </channel>
</rss>